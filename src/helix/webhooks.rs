//! Webhooks

use crate::helix;

use serde::{Deserialize, Serialize};
use typed_builder::TypedBuilder;

use std::default::Default;

pub mod hub {
    //! hooks stuff
    use super::*;

    /// Type of request/mode.
    #[derive(PartialEq, Deserialize, Serialize, Clone, Debug)]
    #[serde(rename_all = "lowercase")]
    pub enum RequestType {
        /// Request subscribes
        Subscribe,
        /// Request unsubscribes
        Unsubscribe,
    }

    impl Default for RequestType {
        fn default() -> Self { RequestType::Subscribe }
    }

    /// Query Parameters for [Subscribe To/Unsubscribe From Events](super::events)
    ///
    /// [`subscribe-to/unsubscribe-from-events`](https://dev.twitch.tv/docs/api/reference#subscribe-tounsubscribe-from-events)
    #[derive(PartialEq, Deserialize, Serialize, Clone, Debug)]
    pub struct Hub<T: helix::Topic + Serialize> {
        #[serde(skip_serializing)]
        topic: T,
    }

    impl<T: helix::Topic + Serialize> Hub<T> {
        /// Create a new Hub request
        pub fn new(topic: T) -> Self { Hub { topic } }
    }

    /// Body Parameters for [Subscribe To/Unsubscribe From Events](super::events)
    ///
    /// [`subscribe-to/unsubscribe-from-events`](https://dev.twitch.tv/docs/api/reference#subscribe-tounsubscribe-from-events)
    #[derive(PartialEq, TypedBuilder, Deserialize, Serialize, Clone, Debug, Default)]
    #[non_exhaustive]
    #[serde(rename = "hub")]
    pub struct HubBody {
        /// URL where notifications will be delivered.
        #[serde(rename="hub.callback")]
        pub callback: String,
        /// Type of request. Valid values: subscribe, unsubscribe.
        #[builder(default)]
        #[serde(rename="hub.mode")]
        pub mode: RequestType,
        /// Number of seconds until the subscription expires. Default: 0. Maximum: 864000. Should be specified to a value greater than 0 otherwise subscriptions will expire before any useful notifications can be sent.
        #[serde(rename="hub.lease_seconds")]
        pub lease_seconds: usize,
        /// Secret used to sign notification payloads. The X-Hub-Signature header is generated by `sha256(secret, notification_bytes)`. We strongly encourage you to use this, so your application can verify that notifications are genuine.
        #[builder(default)]
        #[serde(skip_serializing_if = "Option::is_none")]
        #[serde(rename="hub.secret")]
        pub secret: Option<String>,
    }

    /// Return Values for [Subscribe To/Unsubscribe From Events](super::events)
    ///
    /// [`subscribe-to/unsubscribe-from-events`](https://dev.twitch.tv/docs/api/reference#subscribe-tounsubscribe-from-events)
    pub type HubResponse = String;

    impl<T: helix::Topic + Serialize> helix::Request for Hub<T> {
        type Response = Hub<T>;

        const PATH: &'static str = "webhooks/hub";
        const SCOPE: &'static [twitch_oauth2::Scope] = &[];
    }

    impl<T: helix::Topic + Serialize> helix::RequestPost for Hub<T> {
        type Body = HubBody;

        fn body(&self, body: &Self::Body) -> Result<String, serde_json::Error> {
            #[derive(Serialize)]
            struct InnerBody<'a> {
                #[serde(flatten)]
                data: &'a HubBody,
                #[serde(rename="hub.topic")]
                topic: &'a str,
            }

            #[derive(Serialize)]
            struct IHub<'a> {
                #[serde(flatten)]
                hub: InnerBody<'a>,
            }

            let topic = format!("{}{}?{}", crate::TWITCH_HELIX_URL, <T>::PATH, self.topic.query().unwrap());
            dbg!(serde_json::to_string(&IHub {
                hub: InnerBody {
                    data: &body,
                    topic: &topic,
                },
            }))
        }
    }
}

/// Notifies when a stream changes; e.g., stream goes online or offline, the stream title changes, or the game changes. The response mimics the [Get Streams][helix::streams::get_streams] endpoint.
#[derive(PartialEq, TypedBuilder, Deserialize, Serialize, Clone, Debug)]
pub struct StreamChanged {
    /// Specifies the user whose stream is monitored.
    #[builder(setter(into))]
    pub user_id: String,
}

impl helix::Topic for StreamChanged {
    type Response = helix::streams::Stream;

    const PATH: &'static str = "streams";
}
