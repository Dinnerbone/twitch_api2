(function() {var implementors = {};
implementors["twitch_api2"] = [{"text":"impl&lt;'a, C&gt; Unpin for HelixClient&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Unpin for TMIClient&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, C&gt; Unpin for TwitchClient&lt;'a, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Unpin for Response&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Pagination","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;RE&gt; Unpin for RequestError&lt;RE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RE: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ChannelInformation","synthetic":true,"types":[]},{"text":"impl Unpin for GetChannelInformationRequest","synthetic":true,"types":[]},{"text":"impl Unpin for ModifyChannelInformationBody","synthetic":true,"types":[]},{"text":"impl Unpin for ModifyChannelInformationRequest","synthetic":true,"types":[]},{"text":"impl Unpin for StartCommercial","synthetic":true,"types":[]},{"text":"impl Unpin for StartCommercialBody","synthetic":true,"types":[]},{"text":"impl Unpin for StartCommercialRequest","synthetic":true,"types":[]},{"text":"impl Unpin for ModifyChannelInformation","synthetic":true,"types":[]},{"text":"impl Unpin for CommercialLength","synthetic":true,"types":[]},{"text":"impl Unpin for CommercialLengthParseError","synthetic":true,"types":[]},{"text":"impl Unpin for Clip","synthetic":true,"types":[]},{"text":"impl Unpin for GetClipsRequest","synthetic":true,"types":[]},{"text":"impl Unpin for CheckAutoModStatus","synthetic":true,"types":[]},{"text":"impl Unpin for CheckAutoModStatusBody","synthetic":true,"types":[]},{"text":"impl Unpin for CheckAutoModStatusRequest","synthetic":true,"types":[]},{"text":"impl Unpin for BannedEvents","synthetic":true,"types":[]},{"text":"impl Unpin for GetBannedEventsRequest","synthetic":true,"types":[]},{"text":"impl Unpin for BannedUsers","synthetic":true,"types":[]},{"text":"impl Unpin for GetBannedUsersRequest","synthetic":true,"types":[]},{"text":"impl Unpin for GetModeratorEventsRequest","synthetic":true,"types":[]},{"text":"impl Unpin for ModeratorEvents","synthetic":true,"types":[]},{"text":"impl Unpin for GetModeratorsRequest","synthetic":true,"types":[]},{"text":"impl Unpin for Moderators","synthetic":true,"types":[]},{"text":"impl Unpin for GetStreamsRequest","synthetic":true,"types":[]},{"text":"impl Unpin for Stream","synthetic":true,"types":[]},{"text":"impl Unpin for StreamType","synthetic":true,"types":[]},{"text":"impl Unpin for BroadcasterSubscriptions","synthetic":true,"types":[]},{"text":"impl Unpin for GetBroadcasterSubscriptionsRequest","synthetic":true,"types":[]},{"text":"impl Unpin for GetUsersRequest","synthetic":true,"types":[]},{"text":"impl Unpin for User","synthetic":true,"types":[]},{"text":"impl Unpin for GetChatters","synthetic":true,"types":[]},{"text":"impl Unpin for Chatters","synthetic":true,"types":[]},{"text":"impl&lt;RE&gt; Unpin for RequestError&lt;RE&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DummyHttpClient","synthetic":true,"types":[]},{"text":"impl Unpin for SurfError","synthetic":true,"types":[]}];
implementors["twitch_oauth2"] = [{"text":"impl Unpin for AppAccessToken","synthetic":true,"types":[]},{"text":"impl Unpin for UserToken","synthetic":true,"types":[]},{"text":"impl Unpin for ValidatedToken","synthetic":true,"types":[]},{"text":"impl Unpin for Scope","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;EF, TT&gt; Unpin for TwitchTokenResponse&lt;EF, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TwitchTokenErrorResponse","synthetic":true,"types":[]},{"text":"impl&lt;RE&gt; Unpin for TokenError&lt;RE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RE: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RE&gt; Unpin for ValidationError&lt;RE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RE: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RE&gt; Unpin for RevokeTokenError&lt;RE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RE: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RE&gt; Unpin for RefreshTokenError&lt;RE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RE: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()